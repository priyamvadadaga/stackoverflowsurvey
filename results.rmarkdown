# Results


```{r}
library(tidyverse)
library(dplyr)

survey <- read.csv('data/survey_results_public.csv')
schema <- read.csv('data/survey_results_schema.csv')

# ncol(survey)
# nrow(survey)

keep <- c('MainBranch', 'Age', 'RemoteWork', 'Check', 'EdLevel', 'YearsCode', 'YearsCodePro', 'DevType', 'Country', 'ConvertedCompYearly', 'SOVisitFreq', 'SOAccount', 'SOPartFreq', 'SOComm', 'AISelect', 'AISent', 'AIAcc', 'AIComplex', 'AIThreat', 'ICorPM', 'WorkExp', 'Knowledge_1', 'Knowledge_2', 'Knowledge_3', 'Knowledge_4', 'Knowledge_5', 'Knowledge_6', 'Knowledge_7', 'Knowledge_8', 'Knowledge_9', 'TimeSearching', 'TimeAnswering', 'ProfessionalCloud', 'ProfessionalQuestion', 'Industry', 'JobSat', 'SurveyLength', 'SurveyEase')


selected <- survey |> dplyr::select(all_of(keep))

# colSums(is.na(selected))
# colMeans(is.na(selected)) * 100

selected <- selected |>
  mutate(across(c('MainBranch', 'Age', 'RemoteWork', 'Check', 'EdLevel', 'DevType', 'SOVisitFreq', 'SOAccount', 'SOPartFreq', 'SOComm', 'AISelect', 'AISent', 'AIAcc', 'AIComplex', 'AIThreat', 'ICorPM', 'Knowledge_1', 'Knowledge_2', 'Knowledge_3', 'Knowledge_4', 'Knowledge_5', 'Knowledge_6', 'Knowledge_7', 'Knowledge_8', 'Knowledge_9', 'TimeSearching', 'TimeAnswering', 'ProfessionalCloud', 'ProfessionalQuestion', 'JobSat', 'SurveyLength', 'SurveyEase'), as.factor))
```

```{r}
library(ggplot2)
library(ggalluvial)
library(dplyr)

AIThreat_order <- c('No', 'Unsure', 'Yes')
selected$AIThreat <- factor(selected$AIThreat, levels = AIThreat_order, ordered = TRUE)

AISent_order <- c('Unsure', 'Very unfavorable', 'Unfavorable', 'Indifferent', 'Favorable', 'Very favorable')
selected$AISent <- factor(selected$AISent, levels = AISent_order, ordered = TRUE)

AIComplex_order <- c('Very poor at handling complex tasks', 'Bad at handling complex tasks', 'Neither good or bad at handling complex tasks', 'Good, but not great at handling complex tasks', 'Very well at handling complex tasks')
selected$AIComplex <- factor(selected$AIComplex, levels = AIComplex_order, ordered = TRUE)

AIAcc_order <- c('Highly distrust', 'Somewhat distrust', 'Neither trust nor distrust', 'Somewhat trust', 'Highly trust')
selected$AIAcc <- factor(selected$AIAcc, levels = AIAcc_order, ordered = TRUE)

# Clean data to remove rows with NA values
filtered_data <- selected %>%
  filter(MainBranch == "I am a developer by profession") %>%
  filter(!is.na(AISelect) & !is.na(AISent) & !is.na(AIAcc) & !is.na(AIComplex) & !is.na(AIThreat))
```

```{r}
#| fig-width: 12
#| fig-height: 10
ggplot(filtered_data,
       aes(axis1 = AIThreat, axis2 = AIComplex, axis3 = AISent, axis4 = AIAcc)) +
  geom_alluvium(aes(fill = AIAcc)) +
  geom_stratum(aes(fill = AIAcc), color = "black", size = 0.5) +
  geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.5, color = "black") +
  scale_x_discrete(limits = c("AIThreat", "AIComplex", "AISent", "AIAcc"),
                   expand = c(0.15, 0.15)) +
  scale_fill_brewer(palette = "RdYlBu") +
  theme_void() +
  theme(
    strip.text = element_text(size = 10),
    axis.text = element_text(size = 8),
    axis.title = element_text(size = 10),
    plot.title = element_text(size = 14)
  ) +
  ggtitle("Alluvial Diagram for Developers")
```

```{r}
library(forcats)

# Reorder DevType and place NA at the bottom
avg_years_code_pro <- selected %>%
  group_by(DevType) %>%
  summarize(avg_years_code_pro = mean(as.numeric(YearsCodePro), na.rm = TRUE))

avg_years_code_pro <- avg_years_code_pro %>%
  mutate(DevType = fct_explicit_na(DevType, na_level = "NA")) %>%
  mutate(DevType = fct_rev(DevType))  # Reverse factor levels

# Create the Cleveland dot plot
ggplot(avg_years_code_pro, aes(x = avg_years_code_pro, y = reorder(DevType, avg_years_code_pro))) +
  geom_point(color = "skyblue", size = 2) +  # Use points instead of bars
  labs(x = "Average Years of Professional Coding", y = "Developer Type", 
       title = "Average Years of Professional Coding by Developer Type") +
  theme_minimal() +  # Cleaner theme
  theme(axis.text.y = element_text(size = 10),  # Adjust y-axis text size
        axis.title = element_text(size = 12))  # Adjust axis title size

```

```{r}
#| fig-width: 12
SOVisitFreq_order <- c('Less than once per month or monthly', 'A few times per month or weekly', 'A few times per week', 'Daily or almost daily', 'Multiple times per day')
selected$SOVisitFreq <- factor(selected$SOVisitFreq, levels = SOVisitFreq_order, ordered = TRUE)

filtered_data <- selected |>
  filter(!is.na(AISelect) & !is.na(SOVisitFreq))

contingency_table <- table(filtered_data$SOVisitFreq, filtered_data$AISelect)

mosaicplot(contingency_table, color=TRUE, shade=TRUE, las = 1)
```

```{r}
require(HH)
require(grid)
require(lattice)
require(latticeExtra)

df_long <- selected %>%
  pivot_longer(cols = starts_with("Knowledge_"),
               names_to = "Question",
               values_to = "Response")

df_counts <- df_long %>%
  count(Question, Response) %>%
  pivot_wider(names_from = Response, values_from = n, values_fill = list(n = 0))

likert(Question ~ .,data=df_counts, ylab=NULL, ReferenceZero=3,
  as.percent=TRUE,
  main = list("Team-Related Questions",x=unit(.55, "npc")),
   xlim=c(-40,-20,0,20,40,60,80,100), strip=FALSE,
   par.strip.text=list(cex=.7))
```

```{r}
library(viridis)
library(plotly)

AI_survey <- read.csv('data/parsed_AItools.csv')
AI <- subset(AI_survey, select = -X)

data_long <- AI %>%
  pivot_longer(cols = -index, names_to = "category", values_to = "value")

ggplot(data_long, aes(x = index, y = value, fill = category)) +
    geom_bar(stat = "identity", position = "fill") +  # Use "fill" for proportions
  labs(x = "Activity", y = "Count", title = "Which parts of your development workflow are you currently using AI tools for\nand which are you interested in using AI tools for over the next year?") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggplot(data_long, aes(x = index, y = category, fill = value)) +
  geom_tile() +
  scale_fill_viridis(option = "C") +  # Color scale
  labs(x = "Activity", y = "Category", title = "Heatmap of Interest in Development Activities") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(data_long, aes(x = index, y = value, color = category)) +
  geom_point(position = position_jitter(width = 0.1, height = 0), size = 3) +
  labs(x = "Activity", y = "Count", title = "Dot Plot of Interest in Development Activities") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_color_manual(values = c("Currently_Using" = "blue", 
                               "Interested_in_Using" = "orange", 
                               "Not_interested_in_Using" = "gray"))

plot_ly(data_long, x = ~index, y = ~value, color = ~category, type = 'bar', 
        text = ~paste("Count: ", value), hoverinfo = 'text') %>%
  layout(
    title = "Interest in Different Development Activities",
    xaxis = list(title = "Activity"),
    yaxis = list(title = "Count"),
    barmode = "dodge"
  )
```

```{r}
ggplot(selected, aes(x = AISelect, y = Age)) +
  geom_jitter(aes(color = AISelect), width = 0.1, height = 0.1, alpha = 0.05) +
  theme_minimal() +
  labs(title = "Jitter Plot of AISelect vs Age",
       x = "AISelect",
       y = "Age")
```

```{r}
# Load necessary libraries
library(ggplot2)

df_summary <- as.data.frame(table(selected$AISelect, selected$Age))

ggplot(df_summary, aes(x = Var1, y = Var2, fill=)) +
  geom_tile() +
  scale_fill_viridis_c() +  # Use a color scale to show density
  theme_minimal() +
  labs(title = "Heatmap of Counts for AISelect and Age",
       x = "AISelect",
       y = "Age") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r fig.width= 10}


ggplot(selected, aes(x = DevType, fill = RemoteWork)) +
  geom_bar(position = "fill") +
  labs(x = "Developer Type", y = "Proportion of Remote Work", 
       title = "Proportion of Remote Work by Developer Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r fig.width=8, fig.height=8}
ggplot(selected %>% filter(!is.na(RemoteWork)), aes(x = as.factor(AISelect), y = as.numeric(JobSat))) +
  geom_jitter(aes(), alpha = 0.1, width = 0.2) +  # Add jitter for better visibility
  labs(x = "AI Tool Selection", y = "Job Satisfaction",
       title = "AI Tool Usage vs Job Satisfaction by Age") +
  facet_wrap(~ Age) +  # Facet by RemoteWork status
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```

```{r}
ggplot(selected, aes(x = as.factor(AISelect), y = as.numeric(JobSat))) +
  geom_jitter(aes(), alpha = 0.1, width = 0.2) +  # Add jitter for better visibility
  labs(x = "AI Tool Selection", y = "Job Satisfaction",
       title = "AI Tool Usage vs Job Satisfaction by Stack overflow visit freq") +
  facet_wrap(~ SOVisitFreq) +  # Facet by RemoteWork status
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
ggplot(selected, aes(x = AISelect, y = as.numeric(JobSat), fill = AISelect)) +
  geom_boxplot(alpha = 0.6) +
  labs(x = "AI Tool Selection", y = "Job Satisfaction", 
       title = "Job Satisfaction by AI Tool Selection") +
  facet_wrap(~ RemoteWork) +  # Facet by RemoteWork
  scale_fill_manual(values = c("lightblue", "lightgreen", "lightcoral")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# Categorize JobSat into 3 levels
selected <- selected %>%
  mutate(JobSat_Grouped = case_when(
    as.numeric(as.character(JobSat)) >= 0 & as.numeric(as.character(JobSat)) <= 3 ~ "Low",
    as.numeric(as.character(JobSat)) >= 4 & as.numeric(as.character(JobSat)) <= 7 ~ "Medium",
    as.numeric(as.character(JobSat)) >= 8 & as.numeric(as.character(JobSat)) <= 10 ~ "High",
    TRUE ~ NA_character_ # Keep NA for missing or invalid data
  ))

# Remove rows with NA in JobSat_Grouped or WorkExp
selected <- selected %>%
  filter(!is.na(JobSat_Grouped) & !is.na(WorkExp))

# Create the plot
ggplot(selected, aes(x = WorkExp, fill = JobSat_Grouped)) +
  geom_density(alpha = 0.6) +
  labs(x = "Work Experience (Years)", y = "Density", 
       title = "Density of Work Experience by Job Satisfaction Categories") +
  facet_wrap(~ RemoteWork) +  # Facet by RemoteWork
  scale_fill_manual(values = c("skyblue", "lightgreen", "lightcoral"),  # Adjust colors for 3 categories
                    name = "Job Satisfaction") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
ggplot(selected, aes(x = SOPartFreq, fill = RemoteWork)) +
  geom_bar(position = "dodge", color = "black") +
  labs(x = "Participation Frequency", 
       y = "Count", 
       fill = "Remote Work Setup",
       title = "Participation Frequency vs. Remote Work Setup") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
ggplot(selected, aes(x = SOVisitFreq, fill = SOPartFreq)) +
  geom_bar(position = "fill", color = "black") +
  labs(x = "Visit Frequency", 
       y = "Proportion", 
       fill = "Participation Frequency",
       title = "Relationship Between Visit and Participation Frequency") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
str(selected)
```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(maps)

# Load map data
map_data <- map_data("world")

# Summarize Job Satisfaction data by country
job_sat_data <- selected %>%
  filter(!is.na(JobSat_Grouped)) %>% # Remove missing values
  group_by(Country, JobSat_Grouped) %>%
  tally() %>%
  spread(JobSat_Grouped, n, fill = 0) %>%
  mutate(
    Total = High + Medium + Low,
    High_Proportion = High / Total * 100 # Proportion of "High" satisfaction
  )

# Merge map data with summarized job satisfaction data
merged_data <- left_join(map_data, job_sat_data, by = c("region" = "Country"))

# Plot the choropleth map
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = High_Proportion)) +
  geom_polygon(color = "black", size = 0.1) +
  scale_fill_viridis(option = "magma", direction = -1, name = "High Job Sat (%)") +
  theme_void() +
  labs(title = "Job Satisfaction (High) Proportion by Country")
```

```{r}
library(ggplot2)
library(dplyr)

# Prepare data: Count frequency of combinations of AIThreat and AISent
ai_threat_sentiment <- selected %>%
  filter(!is.na(AIThreat) & !is.na(AISent)) %>%
  count(AIThreat, AISent)

# Create a stacked bar plot
ggplot(ai_threat_sentiment, aes(x = AISent, y = n, fill = AIThreat)) +
  geom_bar(stat = "identity") +
  labs(title = "AI Threat Perception vs AI Sentiment",
       x = "AI Sentiment",
       y = "Count",
       fill = "AI Threat") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(maps)

# Assume 'selected' is the dataset you're working with

# Step 1: Summarize the average Job Satisfaction by country
job_sat_data <- selected %>%
  filter(!is.na(JobSat)) %>%  # Remove rows with missing job satisfaction data
  group_by(Country) %>%  # Group by country
  summarise(AvgJobSat = mean(as.numeric(as.character(JobSat)), na.rm = TRUE))  # Calculate average job satisfaction

# Step 2: Get map data
map_data <- map_data("world")

# Step 3: Merge the map data with the summarized job satisfaction data
merged_data <- left_join(map_data, job_sat_data, by = c("region" = "Country"))

# Step 4: Plot the choropleth map
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = AvgJobSat)) +
  geom_polygon(color = "black", size = 0.1) +  # Draw polygons with black borders
  scale_fill_viridis(option = "magma", direction = -1, name = "Avg Job Sat") +  # Use 'viridis' color scale for better visibility
  theme_void() +  # Remove axis and grid lines for a cleaner map
  labs(title = "Average Job Satisfaction by Country")  # Add title

```

```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(maps)

# Step 1: Summarize the proportion of people who think AI is a threat by country
ai_threat_data <- selected %>%
  filter(!is.na(AIThreat)) %>%  # Remove rows with missing data
  group_by(Country) %>%  # Group by country
  summarise(
    ThreatCount = sum(AIThreat == "Yes", na.rm = TRUE),  # Count how many think AI is a threat
    TotalCount = n(),  # Count the total number of responses
    ProportionThreat = ThreatCount / TotalCount * 100  # Calculate the proportion
  )

# Step 2: Get map data
map_data <- map_data("world")

# Step 3: Merge the map data with the summarized AI threat data
merged_data <- left_join(map_data, ai_threat_data, by = c("region" = "Country"))

# Step 4: Plot the choropleth map
ggplot(merged_data, aes(x = long, y = lat, group = group, fill = ProportionThreat)) +
  geom_polygon(color = "black", size = 0.1) +  # Draw polygons with black borders
  scale_fill_viridis(option = "magma", direction = -1, name = "AI Threat Proportion (%)") +  # Use 'viridis' color scale
  theme_void() +  # Remove axis and grid lines for a cleaner map
  labs(title = "Proportion of People Who Think AI is a Threat by Country")  # Add title

```

```{r fig.height=10}
library(ggplot2)

# Define the correct order of education levels
selected$EdLevel <- factor(selected$EdLevel, 
                           levels = c("Primary/elementary school", 
                                      "Secondary school (e.g. American high school, German Realschule or Gymnasium, etc.)",
                                      "Some college/university study without earning a degree",
                                      "Associate degree (A.A., A.S., etc.)",
                                      "Bachelor’s degree (B.A., B.S., B.Eng., etc.)",
                                      "Master’s degree (M.A., M.S., M.Eng., MBA, etc.)",
                                      "Professional degree (JD, MD, Ph.D, Ed.D, etc.)",
                                      "Something else"))

# Create the bar plot with the specified order
ggplot(selected, aes(x = EdLevel)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of Highest Level of Formal Education",
    x = "Education Level",
    y = "Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_flip()  # Flip the axis if needed for better readability

ggplot(selected, aes(x = EdLevel)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of Highest Level of Formal Education",
    x = "Education Level",
    y = "Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

```{r}
# Install and load treemap package
library(treemap)

# Create a treemap for education levels
education_counts_df <- as.data.frame(table(selected$EdLevel))

# Create the treemap with labels and legend
treemap(education_counts_df,
        index = "Var1",  # Category variable
        vSize = "Freq",  # Size based on frequency
        vColor = "Freq", # Color based on frequency
        palette = "Blues", # Customize the color palette
        draw = TRUE,
        title = "Distribution of Highest Level of Formal Education",
        fontsize.title = 16,  # Adjust title font size
        fontsize.labels = 12, # Adjust labels font size
        fontsize.legend = 10, # Adjust legend font size
        legend = TRUE,  # Show legend
        border.col = "white" # White border around the tiles for better visibility
)

```

